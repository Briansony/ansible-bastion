---
#Create and config the VPC
- hosts: localhost
  connection: local
  #gather_facts: False
  vars_files:
  - group_vars/all

  tasks:
  - name: Include the variables specific to the vpc
    include_vars: envs/{{ environ| default("prod") }}

  # create a new VPC
  - name: Create the VPC
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      subnets: "{{ vpc_subnets }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      route_tables: "{{ vpc_route_tables }}"
      wait: true
    register: vpc

  - name: Write out a temporary file for mapping subnet to id
    template: src=templates/subnet_id.j2 dest=/tmp/subnet_id

  - name: Get the contents of subnet mapping file and set it as a fact
    set_fact:
      subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"

  # generate VPC security group
  - name: Create the security group for the VPC
    ec2_group:
      name: "{{ vpc_group.name }}"
      description: "{{ vpc_group.desc }}"
      vpc_id: "{{ vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      rules: "{{ vpc_group.rules }}"

  # generate ec2 key pair and store generated private key into file
  - name: Generate ec2 key
    ec2_key:
      region: "{{ ec2_region }}"
      name: "{{ vpc_instance_keypair }}"
    register: keypair
  # !!! Keep local file safe on your local machine only
  - name: write generated key to local file
    copy:
      dest: keys/bastion-key.pem
      content: "{{ keypair.key.private_key }}"
      mode: 0600
    when: keypair.changed

  # create specified Bastion instances in multiple AZ
  - name: Create the Instances for created VPC
    ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ vpc_instance_keypair }}"
      instance_type: "{{ vpc_instance_type }}"
      image: "{{ vpc_instance_image }}"
      instance_tags: "{{ vpc_instance_tags }}"
      group: "{{ vpc_group.name }}"
      vpc_subnet_id: "{{ subnet_maps[item.subnet] }}"
      exact_count: "{{ item.exact_count }}"
      count_tag: "{{ item.count_tag }}"
      assign_public_ip: yes
      monitoring: true
      wait: true
    register: ec2
    with_items: vpc_instances

  - name: get list of all ec2 instances
    set_fact: instances="{{ ec2.results | map(attribute='instances') | list}}"

  - name: Add new instance to host group
    add_host: hostname={{ item.public_dns_name }} groupname=launched
    with_flattened: instances
    when: item.public_dns_name is defined

  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_flattened: instances
    when: item.public_dns_name is defined

  # configure bastion instances
- name: Configure created Instances
  hosts: launched
  sudo: True
  roles:
    - bastion
