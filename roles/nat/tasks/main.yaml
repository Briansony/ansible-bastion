- name: allocate new elastic IP
  shell: "aws ec2 allocate-address --domain vpc"
  register: elastic_ip
- set_fact:
    elastic_ip_info: "{{ elastic_ip.stdout | from_json }}"

- name: create NAT Gateway service
  shell: "aws ec2 create-nat-gateway --subnet-id {{ vpc_public_subnets_full[0].id }} --allocation-id {{ elastic_ip_info.AllocationId }}"
  register: nat_gateway
- set_fact:
    nat_gateway_info: "{{ nat_gateway.stdout | from_json }}"

- name: wait until NAT gateway is available
  shell: "aws ec2 describe-nat-gateways --nat-gateway-ids {{ nat_gateway_info.NatGateway.NatGatewayId }} --filter Name=state,Values=available"
  register: nat_gateway
  until: nat_gateway.stdout.find( '{{ nat_gateway_info.NatGateway.NatGatewayId }}' ) > -1
  retries: 20
  delay: 5

- name: update vpc routing tables
  ec2_vpc:
    region: "{{ ec2_region }}"
    cidr_block: "{{ vpc_cidr_block }}"
    resource_tags: "{{ vpc_resource_tags }}"
    internet_gateway: "{{ vpc_internet_gateway|string }}"
    subnets: "{{ vpc.subnets }}"
    route_tables:
      - subnets: "{{ vpc.subnets | get_subnets('tier', 'public', 'cidr') }}"
        routes:
          - dest: 0.0.0.0/0
            gw: igw
        resource_tags: "{{ vpc_route_tables_tags }}"
      - subnets: "{{ vpc.subnets | get_subnets('tier', 'private', 'cidr') }}"
        routes:
          - dest: 0.0.0.0/0
            gw: "{{ nat_gateway_info.NatGateway.NatGatewayId }}"
        resource_tags: "{{ vpc_route_tables_tags }}"
  register: ec2_vpc_out