---
#Create and config the VPC
- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  - envs/{{ environ | default("production") }}.yaml

  tasks:
    # create a new VPC
    - name: Create the VPC
      ec2_vpc:
        region: "{{ ec2_region }}"
        cidr_block: "{{ vpc_cidr_block }}"
        resource_tags: "{{ vpc_resource_tags }}"
        subnets: "{{ vpc_subnets }}"
        internet_gateway: "{{ vpc_internet_gateway|string }}"
        route_tables: "{{ vpc_route_tables }}"
        wait: true
      register: vpc

    # get public subnets
    - name: get vpc public subnets
      set_fact:
        vpc_public_subnets: "{{ vpc.subnets | get_subnets('tier', 'public') }}"

    # generate VPC security group
    - name: Create the security group for the VPC
      ec2_group:
        name: "{{ bastion_security_group.name }}"
        description: "{{ bastion_security_group.desc }}"
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ ec2_region }}"
        rules: "{{ bastion_security_group.rules }}"
      register: bastion_sg

    # generate ec2 key pair and store generated private key into file
    - name: Generate ec2 key
      ec2_key:
        region: "{{ ec2_region }}"
        name: "{{ bastion_keypair_name }}"
      register: keypair
    # !!! Keep local file safe on your local machine only
    - name: write generated key to local file
      copy:
        dest: keys/{{ bastion_keypair_file }}
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    # search for latest Ubintu LTS image
    - name: search for the latest Ubuntu server AMI image
      ec2_ami_find:
        region: "{{ ec2_region }}"
        name: "{{ bastion_image_name }}"
        virtualization_type: hvm
        sort: name
        sort_order: descending
        sort_end: 1
        no_result_action: fail
      register: find_out

    - name: save Ubuntu AMI
      set_fact:
        ubuntu_ami: "{{ find_out.results[0] }}"

    # create bastion launch configuration
    - name: create bastion launch configuration
      ec2_lc:
        name: "{{ bastion_lc_name }}"
        region: "{{ ec2_region }}"
        key_name: "{{ bastion_keypair_name }}"
        image_id: "{{ ubuntu_ami.ami_id }}"
        security_groups: ["{{ bastion_sg.group_id }}"]
        instance_type: "{{ bastion_instance_type }}"
        assign_public_ip: yes
        instance_monitoring: yes

    # create bastion autoscale group
    - name: create bastion autoscale group
      ec2_asg:
        name: "{{ bastion_asg_name }}"
        region: "{{ ec2_region }}"
        launch_config_name: "{{ bastion_lc_name }}"
        health_check_period: "{{ bastion_health_check_period }}"
        desired_capacity: "{{ bastion_cluster_size }}"
        min_size: "{{ bastion_min_cluster_size }}"
        max_size: "{{ bastion_max_cluster_size }}"
        tags: "{{ bastion_instance_tags }}"
        vpc_zone_identifier: "{{ vpc_public_subnets }}"
        wait_for_instances: yes
      register: asg_out

    - name: describe ec2 instances from autoscale group
      local_action: command aws ec2 describe-instances --instance-ids {{ item }}
      with_items: "{{ asg_out.instances }}"
      register: ec2_describe_result

    - name: create a new hosts group with public ip for launched instances
      add_host: >
        hostname="{{(item.stdout | from_json).Reservations[0].Instances[0].PublicIpAddress}}"
        groupname=launched
        ansible_ssh_private_key_file=keys/{{bastion_keypair_file}}
      with_items: "{{ec2_describe_result.results}}"

    - name: Wait for SSH to come up
      wait_for: host="{{item}}" port=22 delay=60 timeout=320 state=started
      with_items: groups.launched

  # configure bastion instances
- name: Configure created Instances
  hosts: launched
  sudo: True
  roles:
    - bastion
