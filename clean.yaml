---
- name: Find NAT instances and terminate them
  hosts: tag_Name_Bastion_NAT:&tag_env_{{ environ | default("production") }}
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  roles:
    - terminate

- name: Find docker registries and terminate them
  hosts: tag_Name_docker_registry:&tag_env_{{ environ | default("production") }}
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  roles:
    - terminate

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/all.yaml
  - group_vars/envs/{{ environ | default("production") }}/vpc.yaml
  - group_vars/envs/{{ environ | default("production") }}/nat.yaml
  - group_vars/envs/{{ environ | default("production") }}/bastion.yaml
  - group_vars/envs/{{ environ | default("production") }}/docker_registry.yaml
  tasks:
  # delete bastion machines
  - name: remove autoscale groups for bastion
    ec2_asg:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      launch_config_name: "{{ item.lc_name }}"
      state: absent
    with_items:
      - { name: "{{ bastion_asg_name }}", lc_name: "{{ bastion_lc_name }}" }

  - name: remove launch configurations for bastion
    ec2_lc:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      instance_type: "{{ item.type }}"
      state: absent
    with_items:
      - { name: "{{ bastion_lc_name }}", type: "{{ bastion_instance_type }}" }

  # find vpc id
  - name: find vpc id
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      subnets: "{{ vpc_subnets }}"
      wait: true
    register: vpc

  # delete DNS zone
  - route53:
      command: get
      zone: "{{ vpc_dns_zone }}"
      vpc_id: "{{ vpc.vpc_id }}"
      private_zone: True
      record: "docker-registry.{{ vpc_dns_zone }}"
      type: A
    register: rec
  - name: delete DNS records
    route53:
      command: delete
      zone: "{{ vpc_dns_zone }}"
      vpc_id: "{{ vpc.vpc_id }}"
      private_zone: True
      record: "{{ rec.set.record }}"
      ttl: "{{ rec.set.ttl }}"
      type: "{{ rec.set.type }}"
      value: "{{ rec.set.value }}"
  - name: discover DNS zone
    local_action: "command aws route53 list-hosted-zones-by-name --dns-name {{ vpc_dns_zone }} --max-items 2 --output json"
    register: list_zones_result_out
  - set_fact:
      list_zones_result: "{{ list_zones_result_out.stdout | from_json }}"
  - name: Check DNS zone count
    fail:
      msg: "Expected exactly one DNS zone"
    when: "{{list_zones_result.HostedZones | length}} != 1"
  - set_fact:
      dns_zone_id: "{{ list_zones_result.HostedZones[0].Id }}"
  - name: delete DNS zone
    local_action: "command aws route53 delete-hosted-zone --id {{ dns_zone_id }} --output json"

  # delete security groups
  - name: delete all security groups
    ec2_group:
      region: "{{ ec2_region }}"
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
    with_items:
      - { name: "{{ nat_security_group.name }}" , description: "{{ nat_security_group.desc }}"}
      - { name: "{{ bastion_security_group.name }}" , description: "{{ bastion_security_group.desc }}"}
      - { name: "{{ docker_registry_security_group.name }}" , description: "{{ docker_registry_security_group.desc }}"}

  # delete VPC
  - name: delete VPC
    ec2_vpc:
      region: "{{ ec2_region }}"
      cidr_block: "{{ vpc_cidr_block }}"
      resource_tags: "{{ vpc_resource_tags }}"
      vpc_id: "{{ vpc.vpc_id }}"
      state: absent
